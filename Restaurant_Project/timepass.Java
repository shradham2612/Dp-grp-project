// class Customer
// {
//     public static void main(String[] args) {
//         //Ye Chutiye
//         System.out.println("hi");
//     }
// }


// // Customer object 
// // Template :::
// abstract class 
// {
//     1       methods
//     2
//     3
//     4

// }


// multiple class implement this abstract class 
// {
//     write their specific outputs 
// }

// main 
// {
//     abstract ka reference + object extending classes ka 


// }

/*
 * Abstract factory
 * 
 * 1)interface {1 method}
 * 
 * public class noodles implements dish
 * public class noodles implements dish
 * public class noodles implements dish
 * public class noodles implements dish
 * public class noodles implements dish
 * 
 * 
 * public class DishFactory extends AbstractFactory {
 * 
 * @Override
 * public DIsh getShape(String shapeType){
 * if(shapeType.equalsIgnoreCase("RECTANGLE")){
 * return new Rectangle();
 * }else if(shapeType.equalsIgnoreCase("SQUARE")){
 * return new Square();
 * }
 * return null;
 * }
 * }
 * 
 * 
 * create classes of different dishes
 * https://www.tutorialspoint.com/design_pattern/abstract_factory_pattern.htm
 

switch case abstract factory 
else
use array list and pass the index 

https://www.tutorialspoint.com/design_pattern/decorator_pattern.htm

 */


 /*
  
 flow of code :::::::

 









  */






